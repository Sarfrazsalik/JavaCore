## Steps to Create Endpoints

### Step 1: Creating the Webserver
The first line to any Javalin app is as follows: 
```java
public static void main(String[] args){
    Javalin app = Javalin.create();
    app.start(9000);
}
```

Note: the number 9000 above represents the port that our web application will be running on. 
This is the port that we will need to send HTTP requests to.


### Step 2: Defining Endpoints
Now that we have a webserver that continuously runs, we need to define endpoints that users and 
other applications can send HTTP Requests to.

The syntax for creating an endpoint is as follows:
```java
public static void main(String[] args){
    Javalin app = Javalin.create();
    app.start(9000);

    // HTTP GET REQUEST to http://localhost:9000/get-request
    app.get("/get-request", ctx -> {
        //logic to be executed when this endpoint is hit
    });


    // HTTP POST REQUEST to http://localhost:9000/post-request
    app.post("/post-request", ctx -> {
        //logic to be executed when this endpoint is hit
    });
}
```

### Step 3: Returning Text
Notice the `ctx` variable. We can utilize this variable to send back data in HTTP response.

```java
public static void main(String[] args){
    Javalin app = Javalin.create().start(9000);

    // HTTP GET REQUEST to http://localhost:9000/get-request
    app.get("/get-request", ctx -> {
        //logic to be executed when this endpoint is hit
        ctx.result("get request endpoint hit!");
    });


    // HTTP POST REQUEST to http://localhost:9000/post-request
    app.post("/post-request", ctx -> {
        //logic to be executed when this endpoint is hit
        ctx.result("post request endpoint hit!");
    });
}
```

The `ctx.result();` method allows us to return data in the HTTP response body. (We will look at how to return different
formats of data later)


## Changing the status code in Javalin

```java
app.get("/request-was-accepted", ctx -> {
    ctx.status(202);
});
```

The only line we need to add to achieve this is `ctx.status(code);` Appropriate codes should be sent back. For instance:
 - 500 represents a server-side error - you should look to the server for a stack trace or other debugging info
 - 400 represents a client-side error
 - 404 This means your request did not match any endpoint.
 - 415 Could mean that the body has an unrecognized content type.