RequestMapping
In Spring MVC, the @RequestMapping annotation is used to map HTTP requests to handler methods in
controllers. It allows developers to define which method should handle a particular URL pattern 
and HTTP method (such as GET, POST, PUT, DELETE, etc.). 

The @RequestMapping annotation can be applied at the class level and/or method level.

You can use @RequestMapping at the class level to specify a common base URL for all handler methods 
within that controller. This is useful for grouping related endpoints under a common base path:

@Controller
@RequestMapping("/api")
public class MyController {
    // Handler methods...
}
You can use @RequestMapping at the method level to further specify the URL pattern and HTTP
method for individual handler methods. This allows you to have multiple handler methods within 
the same controller, each handling different requests.

@Controller 
public class MyController {
    
    @RequestMapping("/hello", method = RequestMethod.GET)
    public String hello() {
        // Handler logic...
    }

    @RequestMapping("/save", method = RequestMethod.POST)
    public String saveData() {
        // Handler logic...
    }
}
The @RequestMapping annotation provides attributes for configuring request mappings to further refine the mapping conditions. Some examples are:

value: This attribute specifies the URL pattern to which the handler method should be mapped.

@RequestMapping(value = "/hello")
method: This attribute specifies the HTTP request method(s) that the handler method should handle.

@RequestMapping(value = "/save", method = RequestMethod.POST)
params: This attribute specifies request parameters that must be present in the request for the handler method to be invoked.

@RequestMapping(value = "/users", params = "id")
ResponseBody
The @ResponseBody annotation in Spring MVC is used to indicate that the return value of a controller method should be serialized directly to the HTTP response body. This annotation is typically used at the class level in combination with the @Controller annotation to specify that the return value of the methods in the class should not be interpreted as a view name but rather as the response content itself. Alternatively, the annotation could be placed on methods rather than the class itself.

Example:

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class ExampleController {

    @RequestMapping("/hello")
    @ResponseBody
    public String hello() {
        return "Hello, World!";
    }
}



URLs like "/login", "/signup", "/user", "/admin" and "/addProduct" etc. can be mapped to methods using the @RequestMapping annotation.
The @ResponseBody ensures that the view type returned for each of the above requests will generate the appropriate response.


Below is an example of using the @RequestMapping and @ResponseBody annotations.

@Controller
@RequestMapping("/api/users")
public class UserController {

    @RequestMapping("/register", method = RequestMethod.POST)
    public @ResponseBody User register(@RequestBody User newUser) {
        // Logic to register a new user
    }

    @RequestMapping("/login", method = RequestMethod.POST)
    public @ResponseBody User login(@RequestBody LoginRequest loginRequest) {
        // Logic to authenticate user login
    }

    @RequestMapping("/{userId}", method = RequestMethod.GET)
    public @ResponseBody User getUserProfile(@PathVariable Long userId) {
        // Logic to retrieve user profile
    }

    @RequestMapping("/{userId}", method = RequestMethod.PUT)
    public @ResponseBody User updateUserProfile(@PathVariable Long userId, @RequestBody User updatedUser) {
        // Logic to update user profile
    }

    // Other handler methods for user operations...
}
We can see clients can perform requests such as a POST request to /api/users/register or a POST request to /api/users/login using the @RequestMapping annotation. We can see the @ResponseBody annotation in the method definitions.


